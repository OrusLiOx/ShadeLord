using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Attacks : MonoBehaviour
{
	public float xEdge = 18, xCenter = 100;
	public int phase;
	public bool attacking;
	private BoxCollider2D col;
	private Animator anim;
	private System.Random rand;

	private Queue<GameObject> spawned;
	private Queue<GameObject> faceSpikes;
	public GameObject spike, faceSpike;

	private void Start()
	{
		attacking = false;
		col = GetComponent<BoxCollider2D>();
		anim = GetComponent<Animator>();
		rand = new System.Random();

		spawned = new Queue<GameObject>();
		faceSpikes = new Queue<GameObject>();
		
	}
	public void Dash()
	{
		
	}

	public void CrossSlash()
	{
	}

	public void Spikes()
	{
		IEnumerator Spikes(int count)
		{
			HashSet<float> coords = new HashSet<float>();
			int coord;
			float offset = xCenter - xEdge + rand.Next(0, 15) / 10f;
			for (int k = rand.Next(0, 7); k < 20; k++)
			{
				do
				{
					coord = rand.Next(1, 25);
				} while (!coords.Add(coord));
				GameObject s = Instantiate(spike);
				s.SetActive(true);
				setPos(s.transform, coord * (1.5f) + offset, 66.42f);
			}

			yield return new WaitForSeconds(1.75f);
			if (count > 1)
				StartCoroutine(Spikes(count - 1));
			else
			{
				attacking = false;
			}

		}

		attacking = true;
		hide();
		StartCoroutine(Spikes(3));
	}

	public void SweepBeam()
	{
	}

	public void FaceSpikes()
	{
	}

	public void stop()
	{
		
	}

	private void arrive(bool forward)
	{
		if(forward)
		{
			anim.Play("NeutralArrive");
		}
		else
		{
			anim.Play("SideArrive");
		}
		rigBod.velocity = new Vector2(0f, 5f);
		new Wa
	}
	private void hide()
	{
		anim.Play("Nothing");
		col.enabled = false;
	}

	private void setX(Transform t, float x)
	{
		t.localPosition = new Vector3(x, t.localPosition.y, t.localPosition.z);
	}
	private void setY(Transform t, float y)
	{
		t.localPosition = new Vector3(t.localPosition.x, y, t.localPosition.z);
	}
	private void setPos(Transform t, float x, float y)
	{
		t.localPosition = new Vector3(x, y, t.localPosition.z);
	}
}
